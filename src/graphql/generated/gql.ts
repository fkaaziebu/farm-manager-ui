/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "mutation AddBarnsToFarm($farmTag: String!, $barns: [BarnInput!]!) {\n  addBarnsToFarm(farmTag: $farmTag, barns: $barns) {\n    id\n  }\n}": typeof types.AddBarnsToFarmDocument,
    "mutation AddLivestockBreedingRecord($maleLivestockTag: String!, $femaleLivestockTag: String!, $breedingRecord: BreedingRecordInput!) {\n  addLivestockBreedingRecord(\n    maleLivestockTag: $maleLivestockTag\n    femaleLivestockTag: $femaleLivestockTag\n    breedingRecord: $breedingRecord\n  ) {\n    id\n  }\n}": typeof types.AddLivestockBreedingRecordDocument,
    "mutation AddLivestockExpenseRecord($livestockTag: String!, $expenseRecord: ExpenseRecordInput!) {\n  addLivestockExpenseRecord(\n    livestockTag: $livestockTag\n    expenseRecord: $expenseRecord\n  ) {\n    id\n  }\n}": typeof types.AddLivestockExpenseRecordDocument,
    "mutation AddLivestockGrowthRecord($livestockTag: String!, $growthRecord: GrowthRecordInput!) {\n  addLivestockGrowthRecord(\n    livestockTag: $livestockTag\n    growthRecord: $growthRecord\n  ) {\n    id\n  }\n}": typeof types.AddLivestockGrowthRecordDocument,
    "mutation AddLivestockHealthRecord($livestockTag: String!, $healthRecord: HealthRecordInput!) {\n  addLivestockHealthRecord(\n    livestockTag: $livestockTag\n    healthRecord: $healthRecord\n  ) {\n    id\n  }\n}": typeof types.AddLivestockHealthRecordDocument,
    "mutation AddLivestockToPen($penUnitId: String!, $livestock: [LivestockInput!]!) {\n  addLivestockToPen(penUnitId: $penUnitId, livestock: $livestock) {\n    id\n  }\n}": typeof types.AddLivestockToPenDocument,
    "mutation AddPensToBarn($barnUnitId: String!, $pens: [PenInput!]!) {\n  addPensToBarn(barnUnitId: $barnUnitId, pens: $pens) {\n    id\n  }\n}": typeof types.AddPensToBarnDocument,
    "mutation AddWorkersToFarm($farmTag: String!, $workers: [WorkerInput!]!) {\n  addWorkersToFarm(farmTag: $farmTag, workers: $workers) {\n    id\n  }\n}": typeof types.AddWorkersToFarmDocument,
    "mutation AssignWorkersToFarm($farmTag: String!, $workerTags: [String!]!) {\n  assignWorkersToFarm(farmTag: $farmTag, workerTags: $workerTags) {\n    id\n  }\n}": typeof types.AssignWorkersToFarmDocument,
    "mutation CreateFarm($name: String!, $location: String!, $area: String!, $farmType: FarmType!) {\n  createFarm(name: $name, location: $location, area: $area, farmType: $farmType) {\n    id\n    name\n  }\n}": typeof types.CreateFarmDocument,
    "mutation LoginAdmin($email: String!, $password: String!) {\n  loginAdmin(email: $email, password: $password) {\n    token\n    name\n    id\n  }\n}": typeof types.LoginAdminDocument,
    "mutation RegisterAdmin($name: String!, $email: String!, $password: String!) {\n  registerAdmin(name: $name, email: $email, password: $password) {\n    id\n  }\n}": typeof types.RegisterAdminDocument,
    "query GetBarn($barnUnitId: String!) {\n  getBarn(barnUnitId: $barnUnitId) {\n    area_sqm\n    capacity\n    construction_date\n    id\n    name\n    unit_id\n    pens {\n      area_sqm\n      bedding_type\n      capacity\n      status\n      unit_id\n      feeder_type\n      livestock {\n        livestock_type\n      }\n      id\n      name\n      waterer_type\n    }\n    ventilation_type\n    status\n  }\n}": typeof types.GetBarnDocument,
    "query GetLivestock($livestockTag: String!) {\n  getLivestock(livestockTag: $livestockTag) {\n    availability_status\n    birth_date\n    livestock_tag\n    livestock_type\n    weight\n    gender\n    health_status\n    id\n    pen {\n      id\n      unit_id\n      livestock {\n        id\n        gender\n        livestock_tag\n        breed\n        livestock_tag\n      }\n    }\n    breeding_records {\n      id\n      status\n      mating_date\n      notes\n      breeding_method\n      expected_delivery\n      offspring_count_female\n      offspring_count_male\n      actual_delivery\n    }\n    health_records {\n      record_status\n      medication\n      notes\n      record_type\n      record_date\n      diagnosis\n      vet_name\n      id\n      issue\n      symptoms\n      treatment\n      dosage\n    }\n    farm {\n      workers {\n        roles\n        name\n      }\n    }\n    growth_records {\n      id\n      growth_rate\n      height\n      length\n      notes\n      period\n      record_date\n      record_type\n      weight\n    }\n    expense_records {\n      amount\n      expense_date\n      id\n      category\n      notes\n    }\n  }\n}": typeof types.GetLivestockDocument,
    "query GetPen($penUnitId: String!) {\n  getPen(penUnitId: $penUnitId) {\n    area_sqm\n    bedding_type\n    capacity\n    status\n    waterer_type\n    unit_id\n    name\n    id\n    feeder_type\n    livestock {\n      id\n      livestock_type\n      livestock_tag\n      inserted_at\n      birth_date\n      weight\n      updated_at\n      gender\n      breed\n      health_status\n    }\n  }\n}": typeof types.GetPenDocument,
    "query ListBarns($searchTerm: String!, $pagination: PaginationInput, $sort: [BarnSortInput!]) {\n  listBarns(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        building_material\n        capacity\n        construction_date\n        id\n        name\n        pens {\n          id\n          livestock {\n            id\n            livestock_type\n          }\n        }\n        status\n        unit_id\n        ventilation_type\n      }\n    }\n  }\n}": typeof types.ListBarnsDocument,
    "query ListFarms($pagination: PaginationInput, $sort: [FarmSortInput!], $searchTerm: String!, $filter: FarmFilterInput) {\n  listFarms(\n    pagination: $pagination\n    sort: $sort\n    searchTerm: $searchTerm\n    filter: $filter\n  ) {\n    edges {\n      node {\n        barns {\n          capacity\n          pens {\n            livestock {\n              breed\n              weight\n              updated_at\n              birth_date\n              id\n            }\n            id\n            unit_id\n            area_sqm\n            status\n          }\n          id\n          status\n          name\n          area_sqm\n          unit_id\n        }\n        name\n        performance\n        area\n        location\n        livestock {\n          id\n          health_status\n          livestock_tag\n          livestock_type\n          breed\n        }\n        workers {\n          id\n          name\n          roles\n          worker_tag\n        }\n        farm_tag\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}": typeof types.ListFarmsDocument,
    "query ListLivestock($searchTerm: String!, $pagination: PaginationInput, $sort: [LivestockSortInput!]) {\n  listLivestock(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    edges {\n      node {\n        availability_status\n        birth_date\n        gender\n        health_status\n        livestock_tag\n        weight\n        updated_at\n        livestock_type\n        pen {\n          unit_id\n          barn {\n            unit_id\n          }\n        }\n        inserted_at\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}": typeof types.ListLivestockDocument,
    "query ListPens($searchTerm: String!, $pagination: PaginationInput, $sort: [PenSortInput!]) {\n  listPens(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        bedding_type\n        capacity\n        feeder_type\n        id\n        name\n        status\n        unit_id\n        barn {\n          name\n        }\n        livestock {\n          id\n          livestock_type\n        }\n      }\n    }\n  }\n}": typeof types.ListPensDocument,
};
const documents: Documents = {
    "mutation AddBarnsToFarm($farmTag: String!, $barns: [BarnInput!]!) {\n  addBarnsToFarm(farmTag: $farmTag, barns: $barns) {\n    id\n  }\n}": types.AddBarnsToFarmDocument,
    "mutation AddLivestockBreedingRecord($maleLivestockTag: String!, $femaleLivestockTag: String!, $breedingRecord: BreedingRecordInput!) {\n  addLivestockBreedingRecord(\n    maleLivestockTag: $maleLivestockTag\n    femaleLivestockTag: $femaleLivestockTag\n    breedingRecord: $breedingRecord\n  ) {\n    id\n  }\n}": types.AddLivestockBreedingRecordDocument,
    "mutation AddLivestockExpenseRecord($livestockTag: String!, $expenseRecord: ExpenseRecordInput!) {\n  addLivestockExpenseRecord(\n    livestockTag: $livestockTag\n    expenseRecord: $expenseRecord\n  ) {\n    id\n  }\n}": types.AddLivestockExpenseRecordDocument,
    "mutation AddLivestockGrowthRecord($livestockTag: String!, $growthRecord: GrowthRecordInput!) {\n  addLivestockGrowthRecord(\n    livestockTag: $livestockTag\n    growthRecord: $growthRecord\n  ) {\n    id\n  }\n}": types.AddLivestockGrowthRecordDocument,
    "mutation AddLivestockHealthRecord($livestockTag: String!, $healthRecord: HealthRecordInput!) {\n  addLivestockHealthRecord(\n    livestockTag: $livestockTag\n    healthRecord: $healthRecord\n  ) {\n    id\n  }\n}": types.AddLivestockHealthRecordDocument,
    "mutation AddLivestockToPen($penUnitId: String!, $livestock: [LivestockInput!]!) {\n  addLivestockToPen(penUnitId: $penUnitId, livestock: $livestock) {\n    id\n  }\n}": types.AddLivestockToPenDocument,
    "mutation AddPensToBarn($barnUnitId: String!, $pens: [PenInput!]!) {\n  addPensToBarn(barnUnitId: $barnUnitId, pens: $pens) {\n    id\n  }\n}": types.AddPensToBarnDocument,
    "mutation AddWorkersToFarm($farmTag: String!, $workers: [WorkerInput!]!) {\n  addWorkersToFarm(farmTag: $farmTag, workers: $workers) {\n    id\n  }\n}": types.AddWorkersToFarmDocument,
    "mutation AssignWorkersToFarm($farmTag: String!, $workerTags: [String!]!) {\n  assignWorkersToFarm(farmTag: $farmTag, workerTags: $workerTags) {\n    id\n  }\n}": types.AssignWorkersToFarmDocument,
    "mutation CreateFarm($name: String!, $location: String!, $area: String!, $farmType: FarmType!) {\n  createFarm(name: $name, location: $location, area: $area, farmType: $farmType) {\n    id\n    name\n  }\n}": types.CreateFarmDocument,
    "mutation LoginAdmin($email: String!, $password: String!) {\n  loginAdmin(email: $email, password: $password) {\n    token\n    name\n    id\n  }\n}": types.LoginAdminDocument,
    "mutation RegisterAdmin($name: String!, $email: String!, $password: String!) {\n  registerAdmin(name: $name, email: $email, password: $password) {\n    id\n  }\n}": types.RegisterAdminDocument,
    "query GetBarn($barnUnitId: String!) {\n  getBarn(barnUnitId: $barnUnitId) {\n    area_sqm\n    capacity\n    construction_date\n    id\n    name\n    unit_id\n    pens {\n      area_sqm\n      bedding_type\n      capacity\n      status\n      unit_id\n      feeder_type\n      livestock {\n        livestock_type\n      }\n      id\n      name\n      waterer_type\n    }\n    ventilation_type\n    status\n  }\n}": types.GetBarnDocument,
    "query GetLivestock($livestockTag: String!) {\n  getLivestock(livestockTag: $livestockTag) {\n    availability_status\n    birth_date\n    livestock_tag\n    livestock_type\n    weight\n    gender\n    health_status\n    id\n    pen {\n      id\n      unit_id\n      livestock {\n        id\n        gender\n        livestock_tag\n        breed\n        livestock_tag\n      }\n    }\n    breeding_records {\n      id\n      status\n      mating_date\n      notes\n      breeding_method\n      expected_delivery\n      offspring_count_female\n      offspring_count_male\n      actual_delivery\n    }\n    health_records {\n      record_status\n      medication\n      notes\n      record_type\n      record_date\n      diagnosis\n      vet_name\n      id\n      issue\n      symptoms\n      treatment\n      dosage\n    }\n    farm {\n      workers {\n        roles\n        name\n      }\n    }\n    growth_records {\n      id\n      growth_rate\n      height\n      length\n      notes\n      period\n      record_date\n      record_type\n      weight\n    }\n    expense_records {\n      amount\n      expense_date\n      id\n      category\n      notes\n    }\n  }\n}": types.GetLivestockDocument,
    "query GetPen($penUnitId: String!) {\n  getPen(penUnitId: $penUnitId) {\n    area_sqm\n    bedding_type\n    capacity\n    status\n    waterer_type\n    unit_id\n    name\n    id\n    feeder_type\n    livestock {\n      id\n      livestock_type\n      livestock_tag\n      inserted_at\n      birth_date\n      weight\n      updated_at\n      gender\n      breed\n      health_status\n    }\n  }\n}": types.GetPenDocument,
    "query ListBarns($searchTerm: String!, $pagination: PaginationInput, $sort: [BarnSortInput!]) {\n  listBarns(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        building_material\n        capacity\n        construction_date\n        id\n        name\n        pens {\n          id\n          livestock {\n            id\n            livestock_type\n          }\n        }\n        status\n        unit_id\n        ventilation_type\n      }\n    }\n  }\n}": types.ListBarnsDocument,
    "query ListFarms($pagination: PaginationInput, $sort: [FarmSortInput!], $searchTerm: String!, $filter: FarmFilterInput) {\n  listFarms(\n    pagination: $pagination\n    sort: $sort\n    searchTerm: $searchTerm\n    filter: $filter\n  ) {\n    edges {\n      node {\n        barns {\n          capacity\n          pens {\n            livestock {\n              breed\n              weight\n              updated_at\n              birth_date\n              id\n            }\n            id\n            unit_id\n            area_sqm\n            status\n          }\n          id\n          status\n          name\n          area_sqm\n          unit_id\n        }\n        name\n        performance\n        area\n        location\n        livestock {\n          id\n          health_status\n          livestock_tag\n          livestock_type\n          breed\n        }\n        workers {\n          id\n          name\n          roles\n          worker_tag\n        }\n        farm_tag\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}": types.ListFarmsDocument,
    "query ListLivestock($searchTerm: String!, $pagination: PaginationInput, $sort: [LivestockSortInput!]) {\n  listLivestock(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    edges {\n      node {\n        availability_status\n        birth_date\n        gender\n        health_status\n        livestock_tag\n        weight\n        updated_at\n        livestock_type\n        pen {\n          unit_id\n          barn {\n            unit_id\n          }\n        }\n        inserted_at\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}": types.ListLivestockDocument,
    "query ListPens($searchTerm: String!, $pagination: PaginationInput, $sort: [PenSortInput!]) {\n  listPens(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        bedding_type\n        capacity\n        feeder_type\n        id\n        name\n        status\n        unit_id\n        barn {\n          name\n        }\n        livestock {\n          id\n          livestock_type\n        }\n      }\n    }\n  }\n}": types.ListPensDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddBarnsToFarm($farmTag: String!, $barns: [BarnInput!]!) {\n  addBarnsToFarm(farmTag: $farmTag, barns: $barns) {\n    id\n  }\n}"): (typeof documents)["mutation AddBarnsToFarm($farmTag: String!, $barns: [BarnInput!]!) {\n  addBarnsToFarm(farmTag: $farmTag, barns: $barns) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddLivestockBreedingRecord($maleLivestockTag: String!, $femaleLivestockTag: String!, $breedingRecord: BreedingRecordInput!) {\n  addLivestockBreedingRecord(\n    maleLivestockTag: $maleLivestockTag\n    femaleLivestockTag: $femaleLivestockTag\n    breedingRecord: $breedingRecord\n  ) {\n    id\n  }\n}"): (typeof documents)["mutation AddLivestockBreedingRecord($maleLivestockTag: String!, $femaleLivestockTag: String!, $breedingRecord: BreedingRecordInput!) {\n  addLivestockBreedingRecord(\n    maleLivestockTag: $maleLivestockTag\n    femaleLivestockTag: $femaleLivestockTag\n    breedingRecord: $breedingRecord\n  ) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddLivestockExpenseRecord($livestockTag: String!, $expenseRecord: ExpenseRecordInput!) {\n  addLivestockExpenseRecord(\n    livestockTag: $livestockTag\n    expenseRecord: $expenseRecord\n  ) {\n    id\n  }\n}"): (typeof documents)["mutation AddLivestockExpenseRecord($livestockTag: String!, $expenseRecord: ExpenseRecordInput!) {\n  addLivestockExpenseRecord(\n    livestockTag: $livestockTag\n    expenseRecord: $expenseRecord\n  ) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddLivestockGrowthRecord($livestockTag: String!, $growthRecord: GrowthRecordInput!) {\n  addLivestockGrowthRecord(\n    livestockTag: $livestockTag\n    growthRecord: $growthRecord\n  ) {\n    id\n  }\n}"): (typeof documents)["mutation AddLivestockGrowthRecord($livestockTag: String!, $growthRecord: GrowthRecordInput!) {\n  addLivestockGrowthRecord(\n    livestockTag: $livestockTag\n    growthRecord: $growthRecord\n  ) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddLivestockHealthRecord($livestockTag: String!, $healthRecord: HealthRecordInput!) {\n  addLivestockHealthRecord(\n    livestockTag: $livestockTag\n    healthRecord: $healthRecord\n  ) {\n    id\n  }\n}"): (typeof documents)["mutation AddLivestockHealthRecord($livestockTag: String!, $healthRecord: HealthRecordInput!) {\n  addLivestockHealthRecord(\n    livestockTag: $livestockTag\n    healthRecord: $healthRecord\n  ) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddLivestockToPen($penUnitId: String!, $livestock: [LivestockInput!]!) {\n  addLivestockToPen(penUnitId: $penUnitId, livestock: $livestock) {\n    id\n  }\n}"): (typeof documents)["mutation AddLivestockToPen($penUnitId: String!, $livestock: [LivestockInput!]!) {\n  addLivestockToPen(penUnitId: $penUnitId, livestock: $livestock) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddPensToBarn($barnUnitId: String!, $pens: [PenInput!]!) {\n  addPensToBarn(barnUnitId: $barnUnitId, pens: $pens) {\n    id\n  }\n}"): (typeof documents)["mutation AddPensToBarn($barnUnitId: String!, $pens: [PenInput!]!) {\n  addPensToBarn(barnUnitId: $barnUnitId, pens: $pens) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AddWorkersToFarm($farmTag: String!, $workers: [WorkerInput!]!) {\n  addWorkersToFarm(farmTag: $farmTag, workers: $workers) {\n    id\n  }\n}"): (typeof documents)["mutation AddWorkersToFarm($farmTag: String!, $workers: [WorkerInput!]!) {\n  addWorkersToFarm(farmTag: $farmTag, workers: $workers) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation AssignWorkersToFarm($farmTag: String!, $workerTags: [String!]!) {\n  assignWorkersToFarm(farmTag: $farmTag, workerTags: $workerTags) {\n    id\n  }\n}"): (typeof documents)["mutation AssignWorkersToFarm($farmTag: String!, $workerTags: [String!]!) {\n  assignWorkersToFarm(farmTag: $farmTag, workerTags: $workerTags) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation CreateFarm($name: String!, $location: String!, $area: String!, $farmType: FarmType!) {\n  createFarm(name: $name, location: $location, area: $area, farmType: $farmType) {\n    id\n    name\n  }\n}"): (typeof documents)["mutation CreateFarm($name: String!, $location: String!, $area: String!, $farmType: FarmType!) {\n  createFarm(name: $name, location: $location, area: $area, farmType: $farmType) {\n    id\n    name\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation LoginAdmin($email: String!, $password: String!) {\n  loginAdmin(email: $email, password: $password) {\n    token\n    name\n    id\n  }\n}"): (typeof documents)["mutation LoginAdmin($email: String!, $password: String!) {\n  loginAdmin(email: $email, password: $password) {\n    token\n    name\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "mutation RegisterAdmin($name: String!, $email: String!, $password: String!) {\n  registerAdmin(name: $name, email: $email, password: $password) {\n    id\n  }\n}"): (typeof documents)["mutation RegisterAdmin($name: String!, $email: String!, $password: String!) {\n  registerAdmin(name: $name, email: $email, password: $password) {\n    id\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetBarn($barnUnitId: String!) {\n  getBarn(barnUnitId: $barnUnitId) {\n    area_sqm\n    capacity\n    construction_date\n    id\n    name\n    unit_id\n    pens {\n      area_sqm\n      bedding_type\n      capacity\n      status\n      unit_id\n      feeder_type\n      livestock {\n        livestock_type\n      }\n      id\n      name\n      waterer_type\n    }\n    ventilation_type\n    status\n  }\n}"): (typeof documents)["query GetBarn($barnUnitId: String!) {\n  getBarn(barnUnitId: $barnUnitId) {\n    area_sqm\n    capacity\n    construction_date\n    id\n    name\n    unit_id\n    pens {\n      area_sqm\n      bedding_type\n      capacity\n      status\n      unit_id\n      feeder_type\n      livestock {\n        livestock_type\n      }\n      id\n      name\n      waterer_type\n    }\n    ventilation_type\n    status\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetLivestock($livestockTag: String!) {\n  getLivestock(livestockTag: $livestockTag) {\n    availability_status\n    birth_date\n    livestock_tag\n    livestock_type\n    weight\n    gender\n    health_status\n    id\n    pen {\n      id\n      unit_id\n      livestock {\n        id\n        gender\n        livestock_tag\n        breed\n        livestock_tag\n      }\n    }\n    breeding_records {\n      id\n      status\n      mating_date\n      notes\n      breeding_method\n      expected_delivery\n      offspring_count_female\n      offspring_count_male\n      actual_delivery\n    }\n    health_records {\n      record_status\n      medication\n      notes\n      record_type\n      record_date\n      diagnosis\n      vet_name\n      id\n      issue\n      symptoms\n      treatment\n      dosage\n    }\n    farm {\n      workers {\n        roles\n        name\n      }\n    }\n    growth_records {\n      id\n      growth_rate\n      height\n      length\n      notes\n      period\n      record_date\n      record_type\n      weight\n    }\n    expense_records {\n      amount\n      expense_date\n      id\n      category\n      notes\n    }\n  }\n}"): (typeof documents)["query GetLivestock($livestockTag: String!) {\n  getLivestock(livestockTag: $livestockTag) {\n    availability_status\n    birth_date\n    livestock_tag\n    livestock_type\n    weight\n    gender\n    health_status\n    id\n    pen {\n      id\n      unit_id\n      livestock {\n        id\n        gender\n        livestock_tag\n        breed\n        livestock_tag\n      }\n    }\n    breeding_records {\n      id\n      status\n      mating_date\n      notes\n      breeding_method\n      expected_delivery\n      offspring_count_female\n      offspring_count_male\n      actual_delivery\n    }\n    health_records {\n      record_status\n      medication\n      notes\n      record_type\n      record_date\n      diagnosis\n      vet_name\n      id\n      issue\n      symptoms\n      treatment\n      dosage\n    }\n    farm {\n      workers {\n        roles\n        name\n      }\n    }\n    growth_records {\n      id\n      growth_rate\n      height\n      length\n      notes\n      period\n      record_date\n      record_type\n      weight\n    }\n    expense_records {\n      amount\n      expense_date\n      id\n      category\n      notes\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query GetPen($penUnitId: String!) {\n  getPen(penUnitId: $penUnitId) {\n    area_sqm\n    bedding_type\n    capacity\n    status\n    waterer_type\n    unit_id\n    name\n    id\n    feeder_type\n    livestock {\n      id\n      livestock_type\n      livestock_tag\n      inserted_at\n      birth_date\n      weight\n      updated_at\n      gender\n      breed\n      health_status\n    }\n  }\n}"): (typeof documents)["query GetPen($penUnitId: String!) {\n  getPen(penUnitId: $penUnitId) {\n    area_sqm\n    bedding_type\n    capacity\n    status\n    waterer_type\n    unit_id\n    name\n    id\n    feeder_type\n    livestock {\n      id\n      livestock_type\n      livestock_tag\n      inserted_at\n      birth_date\n      weight\n      updated_at\n      gender\n      breed\n      health_status\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListBarns($searchTerm: String!, $pagination: PaginationInput, $sort: [BarnSortInput!]) {\n  listBarns(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        building_material\n        capacity\n        construction_date\n        id\n        name\n        pens {\n          id\n          livestock {\n            id\n            livestock_type\n          }\n        }\n        status\n        unit_id\n        ventilation_type\n      }\n    }\n  }\n}"): (typeof documents)["query ListBarns($searchTerm: String!, $pagination: PaginationInput, $sort: [BarnSortInput!]) {\n  listBarns(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        building_material\n        capacity\n        construction_date\n        id\n        name\n        pens {\n          id\n          livestock {\n            id\n            livestock_type\n          }\n        }\n        status\n        unit_id\n        ventilation_type\n      }\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListFarms($pagination: PaginationInput, $sort: [FarmSortInput!], $searchTerm: String!, $filter: FarmFilterInput) {\n  listFarms(\n    pagination: $pagination\n    sort: $sort\n    searchTerm: $searchTerm\n    filter: $filter\n  ) {\n    edges {\n      node {\n        barns {\n          capacity\n          pens {\n            livestock {\n              breed\n              weight\n              updated_at\n              birth_date\n              id\n            }\n            id\n            unit_id\n            area_sqm\n            status\n          }\n          id\n          status\n          name\n          area_sqm\n          unit_id\n        }\n        name\n        performance\n        area\n        location\n        livestock {\n          id\n          health_status\n          livestock_tag\n          livestock_type\n          breed\n        }\n        workers {\n          id\n          name\n          roles\n          worker_tag\n        }\n        farm_tag\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}"): (typeof documents)["query ListFarms($pagination: PaginationInput, $sort: [FarmSortInput!], $searchTerm: String!, $filter: FarmFilterInput) {\n  listFarms(\n    pagination: $pagination\n    sort: $sort\n    searchTerm: $searchTerm\n    filter: $filter\n  ) {\n    edges {\n      node {\n        barns {\n          capacity\n          pens {\n            livestock {\n              breed\n              weight\n              updated_at\n              birth_date\n              id\n            }\n            id\n            unit_id\n            area_sqm\n            status\n          }\n          id\n          status\n          name\n          area_sqm\n          unit_id\n        }\n        name\n        performance\n        area\n        location\n        livestock {\n          id\n          health_status\n          livestock_tag\n          livestock_type\n          breed\n        }\n        workers {\n          id\n          name\n          roles\n          worker_tag\n        }\n        farm_tag\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListLivestock($searchTerm: String!, $pagination: PaginationInput, $sort: [LivestockSortInput!]) {\n  listLivestock(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    edges {\n      node {\n        availability_status\n        birth_date\n        gender\n        health_status\n        livestock_tag\n        weight\n        updated_at\n        livestock_type\n        pen {\n          unit_id\n          barn {\n            unit_id\n          }\n        }\n        inserted_at\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}"): (typeof documents)["query ListLivestock($searchTerm: String!, $pagination: PaginationInput, $sort: [LivestockSortInput!]) {\n  listLivestock(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    edges {\n      node {\n        availability_status\n        birth_date\n        gender\n        health_status\n        livestock_tag\n        weight\n        updated_at\n        livestock_type\n        pen {\n          unit_id\n          barn {\n            unit_id\n          }\n        }\n        inserted_at\n        id\n      }\n    }\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n  }\n}"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "query ListPens($searchTerm: String!, $pagination: PaginationInput, $sort: [PenSortInput!]) {\n  listPens(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        bedding_type\n        capacity\n        feeder_type\n        id\n        name\n        status\n        unit_id\n        barn {\n          name\n        }\n        livestock {\n          id\n          livestock_type\n        }\n      }\n    }\n  }\n}"): (typeof documents)["query ListPens($searchTerm: String!, $pagination: PaginationInput, $sort: [PenSortInput!]) {\n  listPens(searchTerm: $searchTerm, pagination: $pagination, sort: $sort) {\n    pageInfo {\n      endCursor\n      hasNextPage\n      hasPreviousPage\n      startCursor\n    }\n    edges {\n      node {\n        area_sqm\n        bedding_type\n        capacity\n        feeder_type\n        id\n        name\n        status\n        unit_id\n        barn {\n          name\n        }\n        livestock {\n          id\n          livestock_type\n        }\n      }\n    }\n  }\n}"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;