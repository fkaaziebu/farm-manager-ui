"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""
Indicates exactly one field must be supplied and this field must not be `null`.
"""
directive @oneOf on INPUT_OBJECT

type AcceptRequestResponse {
  message: String!
  code: Float!
}

type Admin {
  id: ID!
  name: String!
  email: String!
  farms: [Farm!]
  workers: [Worker!]
  assigned_tasks: [Task!]
  reviews: [Review!]
}

type AdminAuthResponse {
  id: ID!
  name: String!
  email: String!
  farms: [Farm!]
  workers: [Worker!]
  assigned_tasks: [Task!]
  reviews: [Review!]
  token: String!
}

type Apiary {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: HousingStatus!
  area_sqm: Float!
  location_features: String
  sun_exposure: String
  wind_protection: String
  nearby_flora: JSON
  water_source: String
  gps_coordinates: JSON
  hives: [Hive!]
}

type AquacultureBatch {
  id: ID!
  batch_id: String!
  aquatic_type: AquaticType!
  species: String!
  water_type: WaterType!
  stocking_date: DateTime!
  initial_count: Float!
  current_count: Float!
  mortality_count: Float!
  harvested_count: Float!
  average_weight: Float!
  feed_consumption_kg: Float!
  feed_conversion_ratio: Float!
  water_parameters: JSON
  stocking_density: Float!
  health_status: BatchHealthStatus!
  farm: Farm
  pond: Pond
  expense_records: [ExpenseRecord!]
  health_records: [HealthRecord!]
  sales_records: [SalesRecord!]
  growth_records: [GrowthRecord!]
  inserted_at: DateTime!
  updated_at: DateTime!
}

type AquacultureSystem {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: HousingStatus!
  system_type: AquacultureSystemType!
  total_water_volume: Float!
  filtration_method: String
  aeration_method: String
  water_source: String
  ponds: [Pond!]
  farm: Farm
  expense_records: [ExpenseRecord!]
}

"""Type of aquaculture system"""
enum AquacultureSystemType {
  POND
  RACEWAY
  RAS
  CAGE
  BIOFLOC
  AQUAPONICS
}

"""Type of aquatic animal"""
enum AquaticType {
  FISH
  SHRIMP
  CRAB
  OYSTER
  OTHER
}

type Barn {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: HousingStatus!
  area_sqm: Float!
  construction_date: DateTime
  building_material: String
  ventilation_type: String
  climate_controlled: Boolean!
  pens: [Pen!]
  farm: Farm
  expense_records: [ExpenseRecord!]
  tasks: [TaskType!]
}

type BarnConnection {
  edges: [BarnTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input BarnInput {
  unitId: String!
  name: String!
  buildingMaterial: String
  climateControlled: Boolean!
  constructionDate: DateTime
  areaSqm: Float!
  ventilationType: String
  capacity: Float!
}

enum BarnSortField {
  ID
  NAME
  STATUS
}

input BarnSortInput {
  field: BarnSortField!
  direction: SortDirection!
}

type BarnTypeEdge {
  cursor: String!
  node: Barn!
}

"""Health status of an animal batch"""
enum BatchHealthStatus {
  HEALTHY
  MINOR_ISSUES
  OUTBREAK
  RECOVERING
  QUARANTINED
}

type BreedingPairPredictionResponse {
  breedingPairs: [Livestock!]!
  description: String!
}

type BreedingRecord {
  id: ID!
  mating_date: DateTime!
  expected_delivery: DateTime!
  actual_delivery: DateTime
  litter_size: Float
  offspring_count_male: Float
  offspring_count_female: Float
  cost: Float!
  notes: String
  status: BreedingStatus!
  breeding_method: JSON
  animals: [Livestock!]
  inserted_at: DateTime!
  updated_at: DateTime!
}

input BreedingRecordInput {
  matingDate: DateTime!
  expectedDelivery: DateTime!
  breedingMethod: JSON
  cost: Float
  notes: String
  status: BreedingStatus!
}

"""Status of a breeding record"""
enum BreedingStatus {
  PLANNED
  IN_PROGRESS
  SUCCESSFUL
  FAILED
  CANCELLED
}

type Coop {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: HousingStatus!
  nest_boxes: Float!
  area_sqm: Float!
  floor_type: String
  feeder_type: String
  waterer_type: String
  poultryHouse: PoultryHouse
  poultry_batches: [PoultryBatch!]
  farm: Farm
  expense_records: [ExpenseRecord!]
}

input CoordinatesInput {
  lat: Float!
  lon: Float!
}

type CropBatch {
  id: ID!
  crop_batch_tag: String!
  name: String!
  crop_type: CropType!
  crop_kind: CropKind
  variety: String!
  planting_date: DateTime!
  harvest_date: DateTime
  planting_method: PlantingMethod!
  irrigation_method: IrrigationMethod!
  area_planted: Float!
  area_unit: String!
  plants_count: Float!
  seed_amount: Float!
  seed_unit: String
  expected_yield: Float!
  actual_yield: Float!
  yield_unit: String
  gps_coordinates: JSON
  fertilizer_applications: JSON
  pesticide_applications: JSON
  weather_conditions: JSON
  status: CropStatus!
  farm: Farm
  field: Field
  greenhouse: Greenhouse
  expense_records: [ExpenseRecord!]
  sales_records: [SalesRecord!]
  inserted_at: DateTime!
  updated_at: DateTime!
}

type CropBatchConnection {
  edges: [CropBatchTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input CropBatchFilterInput {
  crop_type: CropType
}

input CropBatchInput {
  name: String!
  cropType: CropType!
  cropKind: CropKind!
  variety: String!
  plantingDate: DateTime!
  harvestDate: DateTime
  plantingMethod: PlantingMethod
  irrigationMethod: IrrigationMethod
  gpsCoordinates: JSON!
  areaPlanted: Float
  areaUnit: String
  plantsCount: Float!
}

enum CropBatchSortField {
  ID
  NAME
  STATUS
}

input CropBatchSortInput {
  field: CropBatchSortField!
  direction: SortDirection!
}

type CropBatchTypeEdge {
  cursor: String!
  node: CropBatch!
}

"""Status of a housing unit for crops"""
enum CropHousingStatus {
  ACTIVE
  FALLOW
  PREPARATION
  MAINTENANCE
}

"""Kind of crop"""
enum CropKind {
  MAIZE
  CASHEW
  CASSAVA
  TOMATO
}

"""Growth status of a crop"""
enum CropStatus {
  SEEDLING
  GROWING
  FLOWERING
  FRUITING
  READY_FOR_HARVEST
  HARVESTED
  FAILED
}

"""Type of crop"""
enum CropType {
  GRAIN
  VEGETABLE
  FRUIT
  LEGUME
  ROOT
  TUBER
  FODDER
  FIBER
  OIL
  HERB
  SPICE
  OTHER
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""Type of disease affecting crop"""
enum DiseaseType {
  ANTHRACNOSE
  GUMOSIS
  HEALTHY
  LEAF_MINER
  RED_RUST
  BACTERIAL_BLIGHT
  BROWN_SPOT
  GREEN_MITE
  MOSAIC
  FALL_ARMYWORM
  GRASSHOPER
  LEAF_BEETLE
  LEAF_BLIGHT
  LEAF_SPOT
  STREAK_VIRUS
  LEAF_CURL
  SEPTORIA_LEAF_SPOT
  VERTICILLIUM_WILT
}

"""Category of farm expense"""
enum ExpenseCategory {
  FEED
  MEDICAL
  VACCINATION
  SUPPLEMENTS
  TESTING
  TRANSPORT
  EQUIPMENT
  MAINTENANCE
  UTILITIES
  LABOR
  BREEDING
  IDENTIFICATION
  GROOMING
  FERTILIZER
  PESTICIDE
  HERBICIDE
  SEEDS
  IRRIGATION
  HARVESTING
  HOUSING
  BEDDING
  CLEANING
  OTHER
}

type ExpenseRecord {
  id: ID!
  category: ExpenseCategory!
  expense_date: DateTime!
  amount: Float!
  notes: String!
  livestock: Livestock
  poultry_batch: PoultryBatch
  aquaculture_batch: AquacultureBatch
  crop_batch: CropBatch
  hive: Hive
  barn: Barn
  aquaculture_system: AquacultureSystem
  pond: Pond
  field: Field
  greenhouse: Greenhouse
  apiary: Apiary
  poultry_house: PoultryHouse
  coop: Coop
  pen: Pen
}

input ExpenseRecordInput {
  amount: Float!
  expenseDate: DateTime!
  category: ExpenseCategory!
  notes: String!
}

type Farm {
  id: ID!
  farm_tag: String!
  name: String!
  farm_type: FarmType!
  location: String
  area: String
  latitude: Float!
  longitude: Float!
  performance: Float!
  admin: Admin
  workers: [Worker!]
  barns: [Barn!]
  aquaculture_systems: [AquacultureSystem!]
  ponds: [Pond!]
  fields: [Field!]
  greenhouses: [Greenhouse!]
  apiaries: [Apiary!]
  poultry_houses: [PoultryHouse!]
  coops: [Coop!]
  pens: [Pen!]
  livestock: [Livestock!]
  poultry_batches: [PoultryBatch!]
  aquaculture_batches: [AquacultureBatch!]
  crop_batches: [CropBatch!]
  hives: [Hive!]
  tasks: [Task!]
  reports: [Report!]
  predictions: [Prediction!]
}

type FarmConnection {
  edges: [FarmTypeClassEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input FarmFilterInput {
  id: Int
}

enum FarmSortField {
  ID
  NAME
  INSERTED_AT
}

input FarmSortInput {
  field: FarmSortField!
  direction: SortDirection!
}

"""Type of farm operation"""
enum FarmType {
  LIVESTOCK
  POULTRY
  AQUACULTURE
  CROP
  APIARY
  MIXED
}

type FarmTypeClassEdge {
  cursor: String!
  node: Farm!
}

type Feedback {
  id: ID!
  actual_disease: DiseaseType!
  user_feedback: String
  prediction: [Prediction!]!
}

type Field {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: CropHousingStatus!
  area_hectares: Float!
  soil_type: String
  irrigation_type: String
  slope: String
  drainage: String
  soil_test_results: JSON
  previous_crop: String
  crop_batches: [CropBatch!]
  farm: Farm
  expense_records: [ExpenseRecord!]
}

type FieldConnection {
  edges: [FieldTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input FieldInput {
  unitId: String!
  name: String!
  capacity: Float!
  areaHectares: Float!
  soilType: String
  irrigationType: String
  slope: String
  drainage: String
  soilTestResults: JSON
}

enum FieldSortField {
  ID
  NAME
  STATUS
}

input FieldSortInput {
  field: FieldSortField!
  direction: SortDirection!
}

type FieldTypeEdge {
  cursor: String!
  node: Field!
}

type Greenhouse {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: CropHousingStatus!
  area_sqm: Float!
  construction_date: DateTime
  covering_material: String
  temperature_control: String
  lighting_system: String
  irrigation_system: String
  climate_controlled: Boolean!
  ventilation_system: String
  crop_batches: [CropBatch!]
  farm: Farm
  expense_records: [ExpenseRecord!]
}

type GreenhouseConnection {
  edges: [GreenhouseTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input GreenhouseInput {
  unitId: String!
  name: String!
  capacity: Float!
  areaSqm: Float!
  constructionDate: DateTime
  coveringMaterial: String
  temperatureControl: String
  lightingSystem: String
  irrigationSystem: String
  climateControlled: Boolean
  ventilationSystem: String
}

enum GreenhouseSortField {
  ID
  NAME
  STATUS
}

input GreenhouseSortInput {
  field: GreenhouseSortField!
  direction: SortDirection!
}

type GreenhouseTypeEdge {
  cursor: String!
  node: Greenhouse!
}

type Group {
  id: ID!
  name: String!
  admin: Admin
  workers: [Worker!]
  farms: [Farm!]
  requests: [Request!]
}

type GroupConnection {
  edges: [GroupTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

type GroupTypeEdge {
  cursor: String!
  node: Group!
}

"""Period of growth record measurement"""
enum GrowthPeriod {
  BIRTH
  FOUR_WEEKS
  EIGHT_WEEKS
  TWELVE_WEEKS
  SIXTEEN_WEEKS
  TWENTY_WEEKS
  ADULTHOOD
  CUSTOM
}

type GrowthRecord {
  id: ID!
  record_type: GrowthRecordType!
  period: GrowthPeriod!
  record_date: DateTime!
  weight: Float!
  height: Float
  length: Float
  growth_rate: Float
  feed_conversion: Float
  feed_consumption: Float
  notes: String!
  livestock: Livestock
  poultry_batch: PoultryBatch
  aquaculture_batch: AquacultureBatch
}

input GrowthRecordInput {
  growthRate: Float
  height: Float
  length: Float
  notes: String!
  recordDate: DateTime!
  weight: Float!
  feedConsumption: Float
  period: GrowthPeriod!
  recordType: GrowthRecordType
}

"""Type of growth record (individual or batch)"""
enum GrowthRecordType {
  INDIVIDUAL
  BATCH
}

type HealthRecord {
  id: ID!
  record_type: HealthRecordType!
  record_status: HealthRecordStatus!
  record_date: DateTime!
  issue: String!
  symptoms: String!
  diagnosis: String!
  treatment: String!
  medication: String
  dosage: String
  vet_name: String
  cost: Float!
  notes: String!
  livestock: Livestock
  poultry_batch: PoultryBatch
  aquaculture_batch: AquacultureBatch
}

input HealthRecordInput {
  cost: Float!
  diagnosis: String!
  dosage: String
  issue: String!
  medication: String
  notes: String!
  symptoms: String!
  treatment: String!
  vetName: String
  recordDate: DateTime!
  recordStatus: HealthRecordStatus!
}

"""Status of health record (individual or batch)"""
enum HealthRecordStatus {
  HEALTHY
  SICK
  TREATED
  RECOVERING
  CRITICAL
}

"""Type of health record (individual or batch)"""
enum HealthRecordType {
  INDIVIDUAL
  BATCH
}

"""Health status of an animal"""
enum HealthStatus {
  HEALTHY
  SICK
  TREATED
  RECOVERING
  CRITICAL
}

type Hive {
  id: ID!
  hive_id: String!
  queen_age: Float!
  honey_production: Float!
  wax_production: Float!
  pollen_collection: Float!
  status: HiveStatus!
  bee_population: Float!
  last_inspection: DateTime
  farm: Farm
  apiary: Apiary
  expense_records: [ExpenseRecord!]
  sales_record: SalesRecord
  inserted_at: DateTime!
  updated_at: DateTime!
}

"""Status of a beehive"""
enum HiveStatus {
  ACTIVE
  WEAK
  STRONG
  COLLAPSED
  SWARMING
}

"""Status of a housing unit"""
enum HousingStatus {
  OPERATIONAL
  MAINTENANCE
  EMPTY
  FULL
}

"""Whether it's a field of a greenhouse"""
enum HousingUnit {
  FIELD
  GREENHOUSE
}

"""Method used for irrigation"""
enum IrrigationMethod {
  DRIP
  SPRINKLER
  FLOOD
  FURROW
  RAIN_FED
  MANUAL
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LeafDetection {
  id: ID!
  bbox: JSON!
  detection_confidence: Float!
  predicted_disease: DiseaseType
  confidence: Float!
  top3_predictions: JSON
  prediction: [Prediction!]!
}

input LeafDetectionInput {
  bbox: JSON!
  detection_confidence: Float!
  predicted_disease: DiseaseType!
  confidence: Float!
  top3_predictions: JSON!
}

type Livestock {
  id: ID!
  livestock_tag: String!
  livestock_type: LivestockType!
  breed: String!
  gender: LivestockGender!
  birth_date: DateTime!
  weight: Float!
  milk_production: Float
  meat_grade: String
  health_status: HealthStatus!
  availability_status: LivestockAvailabilityStatus
  unavailability_reason: LivestockUnavailabilityReason
  mother: Livestock
  father: Livestock
  maternalOffspring: [Livestock!]
  paternalOffspring: [Livestock!]
  farm: Farm
  pen: Pen
  breeding_records: [BreedingRecord!]
  growth_records: [GrowthRecord!]
  expense_records: [ExpenseRecord!]
  health_records: [HealthRecord!]
  inserted_at: DateTime!
  updated_at: DateTime!
}

"""Shows animal availability"""
enum LivestockAvailabilityStatus {
  UNAVAILABLE
  AVAILABLE
}

type LivestockConnection {
  edges: [LivestockTypeClassEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input LivestockFilterInput {
  livestock_type: LivestockType
}

"""Gender of an animal"""
enum LivestockGender {
  MALE
  FEMALE
}

input LivestockInput {
  livestockTag: String
  birthDate: DateTime!
  breed: String!
  weight: Float!
  livestockType: LivestockType!
  gender: LivestockGender!
}

enum LivestockSortField {
  ID
  LIVESTOCK_TYPE
}

input LivestockSortInput {
  field: LivestockSortField!
  direction: SortDirection!
}

"""Type of livestock animal"""
enum LivestockType {
  GRASSCUTTER
  CATTLE
  GOAT
  SHEEP
  PIG
  OTHER
}

type LivestockTypeClassEdge {
  cursor: String!
  node: Livestock!
}

"""Shows animal unavailability reason"""
enum LivestockUnavailabilityReason {
  NOT_APPLICABLE
  DEAD
  SOLD
}

"""Model for the prediction"""
enum ModelType {
  ENHANCED_MOBILENETV2
  ENHANCED_RESNET50
}

type Mutation {
  registerAdmin(name: String!, email: String!, password: String!): Admin!
  loginAdmin(email: String!, password: String!): AdminAuthResponse!
  loginWorker(email: String!, password: String!): WorkerAuthResponse!
  requestAdminPasswordReset(email: String!): RequestResetResponse!
  requestWorkerPasswordReset(email: String!): RequestResetResponse!
  resetAdminPassword(email: String!, password: String!, resetCode: String!): ResetResponse!
  resetWorkerPassword(email: String!, password: String!, resetCode: String!): ResetResponse!
  createFarm(name: String!, location: String!, area: String!, latitude: Float!, longitude: Float!, farmType: FarmType!): Farm!
  updateFarm(farmTag: String!, name: String, location: String, area: String, defaultStartTag: String, farmType: FarmType): Farm!
  assignWorkersToFarm(farmTag: String!, workerTags: [String!]!): Farm!
  addWorkersToFarm(farmTag: String!, workers: [WorkerInput!]!): Farm!
  updateWorker(workerTag: String!, workerData: UpdateWorkerInput!): Worker!
  addBarnsToFarm(farmTag: String!, barns: [BarnInput!]!): Farm!
  updateBarn(barnUnitId: String!, barn: UpdateBarnInput!): Barn!
  addPensToBarn(barnUnitId: String!, pens: [PenInput!]!): Barn!
  updatePen(penUnitId: String!, pen: UpdatePenInput!): Pen!
  addLivestockToPen(penUnitId: String!, livestock: [LivestockInput!]!): Pen!
  updateLivestock(livestockTag: String!, livestock: UpdateLivestockInput!): Livestock!
  markLivestockAsUnavailable(livestockTag: String!, unavailabilityReason: LivestockUnavailabilityReason!): Livestock!
  createTask(farmTag: String!, task: TaskInput!): Task!
  updateTask(taskId: Float!, task: UpdateTaskInput!): Task!
  updateTaskProgress(taskId: Float!, task: UpdateTaskProgressInput!): Task!
  assignTaskToWorker(taskId: Float!, workerTag: String!): Task!
  addLivestockBreedingRecord(maleLivestockTag: String!, femaleLivestockTag: String!, breedingRecord: BreedingRecordInput!): BreedingRecord!
  updateLivestockBreedingRecord(breedingRecordId: Float!, breedingRecord: UpdateBreedingRecordInput!): BreedingRecord!
  addLivestockHealthRecord(livestockTag: String!, healthRecord: HealthRecordInput!): HealthRecord!
  updateLivestockHealthRecord(healthRecordId: Float!, healthRecord: UpdateHealthRecordInput!): HealthRecord!
  addLivestockGrowthRecord(livestockTag: String!, growthRecord: GrowthRecordInput!): GrowthRecord!
  updateLivestockGrowthRecord(growthRecordId: Float!, growthRecord: UpdateGrowthRecordInput!): GrowthRecord!
  addLivestockExpenseRecord(livestockTag: String!, expenseRecord: ExpenseRecordInput!): ExpenseRecord!
  updateLivestockExpenseRecord(expenseRecordId: Float!, expenseRecord: UpdateExpenseRecordInput!): ExpenseRecord!
  addLivestockSalesRecord(livestockTag: String!, salesRecord: SalesRecordInput!): SalesRecord!
  updateLivestockSalesRecord(salesRecordId: Float!, salesRecord: UpdateSalesRecordInput!): SalesRecord!
  addWorkerReview(workerTag: String!, review: ReviewInput!): Review!
  createGroup(name: String!): Group!
  createAuditor(groupId: String!, worker: WorkerInput!): Worker!
  requestWorkersToJoinGroup(groupId: String!, workerEmails: [String!]!): RequestToJoinResponse!
  requestFarmsToJoinGroup(groupId: String!, farmTags: [String!]!): RequestToJoinResponse!
  acceptRequest(requestId: String!): AcceptRequestResponse!
  createReport(farmTag: String!): Report!
  verifyReport(reportId: String!, verificationCode: String!, coordinate: CoordinatesInput!): Report!
  updateReport(reportId: String!, reportData: UpdateReportInput!): Report!
  completeReport(reportId: String!): Report!
  addFieldsToFarm(farmTag: String!, fields: [FieldInput!]!): Farm!
  addGreenhousesToFarm(farmTag: String!, greenhouses: [GreenhouseInput!]!): Farm!
  addCropBatchesToField(fieldUnitId: String!, cropBatches: [CropBatchInput!]!): Field!
  addCropBatchesToGreenhouse(greenhouseUnitId: String!, cropBatches: [CropBatchInput!]!): Greenhouse!
  addCropBatchExpenseRecord(cropBatchTag: String!, expenseRecord: ExpenseRecordInput!): ExpenseRecord!
  addCropBatchSalesRecord(cropBatchTag: String!, salesRecord: SalesRecordInput!): SalesRecord!
  updateField(fieldUnitId: String!, field: UpdateFieldInput!): Field!
  updateGreenhouse(greenhouseUnitId: String!, greenhouse: UpdateGreenhouseInput!): Greenhouse!
  updateCropBatch(cropBatchTag: String!, cropBatch: UpdateCropBatchInput!): CropBatch!
  updateCropBatchExpenseRecord(expenseRecordId: Float!, expenseRecord: UpdateExpenseRecordInput!): ExpenseRecord!
  updateCropBatchSalesRecord(salesRecordId: Float!, salesRecord: UpdateSalesRecordInput!): SalesRecord!
  submitPredictionFeedback(predictionId: String!, userFeedback: String!, actualDisease: DiseaseType!): Prediction!
  createPrediction(farmTag: String!, cropType: PredictionCropType!, modelUsed: ModelType!, leafDetections: [LeafDetectionInput!]!, imagePath: String!, processingTimeMs: Float!): Prediction!
}

input Offspring {
  livestockTag: String
  breed: String!
  weight: Float!
  gender: LivestockGender!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
}

input PaginationInput {
  first: Int
  after: String
  last: Int
  before: String
}

type Pen {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: HousingStatus!
  bedding_type: String
  area_sqm: Float!
  feeder_type: String
  waterer_type: String
  barn: Barn
  livestock: [Livestock!]
  farm: Farm
  expense_records: [ExpenseRecord!]
  tasks: [TaskType!]
}

type PenConnection {
  edges: [PenTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input PenInput {
  unitId: String!
  name: String!
  areaSqm: Float!
  beddingType: String
  capacity: Float!
  feederType: String
  watererType: String
}

enum PenSortField {
  ID
  NAME
  STATUS
}

input PenSortInput {
  field: PenSortField!
  direction: SortDirection!
}

type PenTypeEdge {
  cursor: String!
  node: Pen!
}

"""Method used for planting"""
enum PlantingMethod {
  DIRECT_SEEDING
  TRANSPLANTING
  CUTTING
  GRAFTING
  LAYERING
  DIVISION
}

type Pond {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: HousingStatus!
  volume_liters: Float!
  depth_meters: Float!
  surface_area_sqm: Float!
  liner_type: String
  water_source: String
  water_parameters: JSON
  aquacultureSystem: AquacultureSystem
  aquaculture_batches: [AquacultureBatch!]
  farm: Farm
  expense_records: [ExpenseRecord!]
}

type PoultryBatch {
  id: ID!
  batch_id: String!
  poultry_type: PoultryType!
  breed: String!
  purpose: PoultryPurpose!
  hatch_date: DateTime!
  initial_count: Float!
  current_count: Float!
  mortality_count: Float!
  sold_count: Float!
  average_weight: Float!
  feed_consumption_kg: Float!
  egg_production: Float!
  feed_conversion_ratio: Float!
  health_status: BatchHealthStatus!
  farm: Farm
  coop: Coop
  expense_records: [ExpenseRecord!]
  health_records: [HealthRecord!]
  sales_records: [SalesRecord!]
  growth_records: [GrowthRecord!]
  inserted_at: DateTime!
  updated_at: DateTime!
}

type PoultryHouse {
  id: ID!
  unit_id: String!
  name: String!
  capacity: Float!
  status: HousingStatus!
  area_sqm: Float!
  ventilation_type: String
  climate_controlled: Boolean!
  lighting_program: String
  construction_date: DateTime
  coops: [Coop!]
  farm: Farm
  expense_records: [ExpenseRecord!]
}

"""Purpose of raising poultry"""
enum PoultryPurpose {
  MEAT
  EGGS
  DUAL_PURPOSE
  BREEDING
}

"""Type of poultry"""
enum PoultryType {
  CHICKEN
  DUCK
  TURKEY
  QUAIL
  OTHER
}

type Prediction {
  id: ID!
  crop_type: PredictionCropType!
  model_used: ModelType!
  image_path: String!
  processing_time_ms: Float!
  inserted_at: DateTime!
  updated_at: DateTime!
  feedback: Feedback
  leaf_detections: [LeafDetection!]
  farm: Farm!
}

type PredictionConnection {
  edges: [PredictionTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

"""Type of crop we are predicting for"""
enum PredictionCropType {
  MAIZE
  CASSAVA
  CASHEW
  TOMATO
}

input PredictionFilterInput {
  farmTag: String
  modelUsed: ModelType
  cropType: PredictionCropType
  predictedDisease: DiseaseType
}

enum PredictionSortField {
  INSERTED_AT
}

input PredictionSortInput {
  field: PredictionSortField!
  direction: SortDirection!
}

type PredictionTypeEdge {
  cursor: String!
  node: Prediction!
}

"""Type of product being sold"""
enum ProductType {
  LIVESTOCK
  POULTRY
  FISH
  CROP
  HONEY
  OTHER
}

type QrCodeResponse {
  qrCode: String!
}

type Query {
  listFarms(searchTerm: String!, filter: FarmFilterInput, pagination: PaginationInput, sort: [FarmSortInput!]): FarmConnection!
  listWorkers(searchTerm: String!, pagination: PaginationInput): WorkerConnection!
  getWorker(workerTag: String!): Worker!
  listTask(filter: TaskFilterInput): [Task!]!
  listBarns(searchTerm: String!, pagination: PaginationInput, sort: [BarnSortInput!]): BarnConnection!
  getBarn(barnUnitId: String!): Barn!
  listPens(searchTerm: String!, pagination: PaginationInput, sort: [PenSortInput!]): PenConnection!
  getPen(penUnitId: String!): Pen!
  listLivestock(searchTerm: String!, filter: LivestockFilterInput, pagination: PaginationInput, sort: [LivestockSortInput!]): LivestockConnection!
  getLivestock(livestockTag: String!): Livestock!
  getQrCode(farmTag: String!): QrCodeResponse!
  listGroupFarms(groupId: String!): FarmConnection!
  listGroupAuditors(groupId: String!): WorkerConnection!
  getGroupAuditor(groupId: String!, workerTag: String!): Worker!
  getGroup(groupId: String!): Group!
  listGroups: GroupConnection!
  listReports(filter: ReportFilterInput, pagination: PaginationInput, sort: [ReportSortInput!]): ReportConnection!
  getReport(reportId: String!): Report!
  getField(fieldUnitId: String!): Field!
  getGreenhouse(greenhouseUnitId: String!): Greenhouse!
  getCropBatch(cropBatchTag: String!, housingUnit: HousingUnit!): CropBatch!
  listFields(searchTerm: String!, pagination: PaginationInput, sort: [FieldSortInput!]): FieldConnection!
  listGreenhouses(searchTerm: String!, pagination: PaginationInput, sort: [GreenhouseSortInput!]): GreenhouseConnection!
  listCropBatches(searchTerm: String!, housingUnit: HousingUnit!, filter: CropBatchFilterInput, pagination: PaginationInput, sort: [CropBatchSortInput!]): CropBatchConnection!
  livestockBreedingPairPrediction(livestockTag: String!): BreedingPairPredictionResponse!
  mcpRequest(query: String!): String!
  listPredictions(filter: PredictionFilterInput, pagination: PaginationInput, sort: [PredictionSortInput!]): PredictionConnection!
  getPrediction(predictionId: String!): Prediction!
}

type Report {
  id: ID!
  report_tag: String!
  verified: Boolean!
  completed: Boolean!
  worker: Worker
  farm: Farm
}

type ReportConnection {
  edges: [ReportTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input ReportFilterInput {
  reportId: String
}

enum ReportSortField {
  ID
  NAME
  STATUS
}

input ReportSortInput {
  field: ReportSortField!
  direction: SortDirection!
}

type ReportTypeEdge {
  cursor: String!
  node: Report!
}

type Request {
  id: ID!
  status: RequestStatus!
  type: RequestType!
  expires_at: DateTime!
  worker: Worker
  farm: Farm
  group: Group
}

type RequestResetResponse {
  message: String!
}

"""Whether it is pending, declined or accepted"""
enum RequestStatus {
  PENDING
  DECLINED
  ACCEPTED
}

type RequestToJoinResponse {
  message: String!
  code: Float!
}

"""This specifies the entity we are sending the request to"""
enum RequestType {
  WORKER
  FARM
}

type ResetResponse {
  message: String!
}

type Review {
  id: ID!
  description: String!
  rating: Float!
  admin: Admin
  worker: Worker
  inserted_at: DateTime!
  updated_at: DateTime!
}

input ReviewInput {
  description: String!
  rating: Float!
}

type SalesRecord {
  id: ID!
  buyer_name: String!
  sale_date: DateTime!
  product_type: ProductType!
  quantity: Float!
  unit: String!
  price_per_unit: Float!
  total_amount: Float!
  expenses: Float
  notes: String!
  farm: Farm
  livestock: Livestock
  poultry_batch: PoultryBatch
  aquaculture_batch: AquacultureBatch
  crop_batch: CropBatch
  hive: Hive
}

input SalesRecordInput {
  buyerName: String!
  expenses: Float
  notes: String!
  pricePerUnit: Float!
  quantity: Float!
  saleDate: DateTime!
  totalAmount: Float!
  unit: String!
}

enum SortDirection {
  ASC
  DESC
}

type Task {
  id: ID!
  type: TaskType!
  description: String!
  notes: String
  starting_date: DateTime!
  started_at: DateTime
  completion_date: DateTime!
  completed_at: DateTime
  status: TaskStatus!
  admin: Admin
  worker: Worker
  farm: Farm
  barns: [Barn!]
  pens: [Pen!]
}

input TaskFilterInput {
  farmTag: String
}

input TaskInput {
  completionDate: DateTime!
  description: String!
  type: TaskType!
  notes: String
  startingDate: DateTime!
  status: TaskStatus!
}

"""Status of a task"""
enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

"""Type of a task"""
enum TaskType {
  REGULAR_INSPECTION
  TRAINING_SESSION
  ELECTRIC_CHECK
  MAINTENANCE
  CLEANING
}

input UpdateBarnInput {
  name: String
  buildingMaterial: String
  climateControlled: Boolean
  constructionDate: DateTime
  areaSqm: Float
  ventilationType: String
  capacity: Float
  status: HousingStatus
}

input UpdateBreedingRecordInput {
  matingDate: DateTime
  cost: Float
  expectedDelivery: DateTime
  actualDelivery: DateTime
  breedingMethod: JSON
  notes: String
  offsprings: [Offspring!]
  status: BreedingStatus
}

input UpdateCropBatchInput {
  name: String
  cropType: CropType
  cropKind: CropKind
  variety: String
  plantingDate: DateTime
  harvestDate: DateTime
  plantingMethod: PlantingMethod
  irrigationMethod: IrrigationMethod
  areaPlanted: Float
  areaUnit: String
  plantsCount: Float
  seedAmount: Float
  seedUnit: String
  expectedYield: Float
  actualYield: Float
  yieldUnit: String
  fertilizerApplications: JSON
  pesticideApplications: JSON
  weatherConditions: JSON
  status: CropStatus
  gpsCoordinates: JSON
}

input UpdateExpenseRecordInput {
  amount: Float!
  expenseDate: DateTime!
  category: ExpenseCategory!
  notes: String!
}

input UpdateFieldInput {
  name: String
  capacity: Float
  areaHectares: Float
  soilType: String
  irrigationType: String
  slope: String
  drainage: String
  previousCrop: String
  status: CropHousingStatus
  soilTestResults: JSON
  gpsCoordinates: JSON
}

input UpdateGreenhouseInput {
  name: String
  capacity: Float
  areaSqm: Float
  constructionDate: DateTime
  coveringMaterial: String
  temperatureControl: String
  lightingSystem: String
  irrigationSystem: String
  climateControlled: Boolean
  ventilationSystem: String
  status: CropHousingStatus
}

input UpdateGrowthRecordInput {
  feedConsumption: Float
  growthRate: Float
  height: Float
  length: Float
  notes: String
  recordDate: DateTime
  weight: Float
  period: GrowthPeriod
}

input UpdateHealthRecordInput {
  cost: Float
  diagnosis: String
  dosage: String
  issue: String
  medication: String
  notes: String
  symptoms: String
  treatment: String
  vetName: String
  recordDate: DateTime
  recordStatus: HealthRecordStatus
}

input UpdateLivestockInput {
  birthDate: DateTime
  milkProduction: Float
  meatGrade: String
  breed: String
  weight: Float
  motherTag: String
  fatherTag: String
  livestockType: LivestockType
  gender: LivestockGender
  offspringTags: [String!]
}

input UpdatePenInput {
  name: String
  areaSqm: Float
  beddingType: String
  capacity: Float
  feederType: String
  watererType: String
  status: HousingStatus
}

input UpdateReportInput {
  completionDate: DateTime
  notes: String
  startingDate: DateTime
  status: TaskStatus
}

input UpdateSalesRecordInput {
  buyerName: String
  expenses: Float
  notes: String
  pricePerUnit: Float
  quantity: Float
  saleDate: DateTime
  totalAmount: Float
  unit: String
}

input UpdateTaskInput {
  completionDate: DateTime
  notes: String
  startingDate: DateTime
}

input UpdateTaskProgressInput {
  startedAt: DateTime!
  completedAt: DateTime
  status: TaskStatus!
}

input UpdateWorkerInput {
  name: String
  join_date: DateTime
  phone: String
  address: String
  bio: JSON
  skills: [String!]
  achievements: JSON
  roles: [WorkerRole!]
}

"""Type of water environment"""
enum WaterType {
  FRESHWATER
  SALTWATER
  BRACKISH
}

type Worker {
  id: ID!
  worker_tag: String!
  name: String!
  roles: [WorkerRole!]!
  email: String!
  join_date: DateTime
  phone: String
  address: String
  bio: JSON
  skills: [String!]
  achievements: [JSON!]
  farms: [Farm!]
  admin: Admin
  assigned_tasks: [Task!]
  reports: [Report!]
  reviews: [Review!]
  assigned_reviews: [Review!]
}

type WorkerAuthResponse {
  id: ID!
  worker_tag: String!
  name: String!
  roles: [WorkerRole!]!
  email: String!
  join_date: DateTime
  phone: String
  address: String
  bio: JSON
  skills: [String!]
  achievements: [JSON!]
  farms: [Farm!]
  admin: Admin
  assigned_tasks: [Task!]
  reports: [Report!]
  reviews: [Review!]
  assigned_reviews: [Review!]
  token: String!
}

type WorkerConnection {
  edges: [WorkerTypeEdge!]!
  pageInfo: PageInfo!
  count: Int!
}

input WorkerInput {
  name: String!
  email: String!
  roles: [WorkerRole!]!
}

"""The roles a worker can have on the farm"""
enum WorkerRole {
  FARM_MANAGER
  VETERINARIAN
  FEED_SPECIALIST
  ANIMAL_CARETAKER
  CROP_SPECIALIST
  MAINTENANCE
  GENERAL_WORKER
  AUDITOR
}

type WorkerTypeEdge {
  cursor: String!
  node: Worker!
}


